{"ast":null,"code":"import Ball from './Ball';\nimport Player from './Player';\n\nclass Game {\n  constructor(canvas, getPoints, isGameOver, isMulti) {\n    //singleton\n    if (Game.instance) {\n      return Game.instance;\n    }\n\n    Game.instance = this;\n    this.isMulti = isMulti;\n    this.p1Points = 0;\n    this.p2Points = 0;\n    this.getPoints = getPoints;\n    this.isGameOver = isGameOver; //field\n\n    this.canvas = canvas;\n    this.ctxt = this.canvas.getContext('2d');\n    this.canvas.width = document.body.clientWidth * 0.7;\n    this.canvas.height = window.innerHeight * 0.7;\n    this.halfLinePos = this.canvas.width / 2;\n    window.addEventListener('resize', () => {\n      this.canvas.width = document.body.clientWidth * 0.7;\n      this.canvas.height = window.innerHeight * 0.7;\n    });\n  }\n\n  start() {\n    if (this.isMulti === true) {\n      this.ball = new Ball(this.canvas);\n      this.pc = new Player('P1', this.canvas);\n      this.user = new Player('P2', this.canvas);\n      window.requestAnimationFrame(this.drawGame.bind(this));\n    } else if (this.isMulti === false) {\n      ll(this.canvas);\n      this.pc = new Player('P1', this.canvas);\n      this.user = new Player('PC', this.canvas);\n      window.requestAnimationFrame(this.drawGame.bind(this));\n    }\n  }\n\n  checkTouchRightPlayer() {\n    let userX = this.canvas.width - this.user.playerWidth;\n    let touchX = this.ball.x + this.ball.raduis > userX;\n    let inYTop = this.ball.y > this.user.y;\n    let inYBottom = this.ball.y < this.user.y + this.user.playerSize;\n\n    if (touchX && inYBottom && inYTop) {\n      return true;\n    }\n\n    return false;\n  }\n\n  checkTouchLeftlayer() {\n    let pcX = this.user.playerWidth;\n    let touchX = this.ball.x - this.ball.raduis < pcX;\n    let inYTop = this.ball.y > this.pc.y;\n    let inYBottom = this.ball.y < this.pc.y + this.pc.playerSize;\n\n    if (touchX && inYBottom && inYTop) {\n      return true;\n    }\n\n    return false;\n  }\n\n  resetMiniGame() {\n    this.ball.x = this.canvas.width / 2;\n    this.ball.y = this.canvas.height / 2;\n    this.ball.xDirection = -1;\n    this.ball.yDirection = 1;\n    this.ball.speed = 4;\n  }\n\n  checkMiniGameEnd() {\n    //check left & right boundries ( win /lose )\n    let rightBorder = this.canvas.width - this.ball.raduis;\n    let leftBorder = this.ball.raduis;\n\n    if (this.ball.x > rightBorder) {\n      this.p1Points++;\n      this.getPoints(this.p1Points, 'Left');\n      this.resetMiniGame();\n      console.log(this.p1Points);\n    }\n\n    if (this.ball.x < leftBorder) {\n      this.p2Points++;\n      this.getPoints(this.p2Points, 'Right');\n      this.resetMiniGame();\n      console.log(this.p2Points);\n    }\n  }\n\n  checkGameOver() {\n    if (this.p1Points === 3) {\n      return 'Left';\n    } else if (this.p2Points === 3) {\n      return 'Right';\n    }\n  }\n\n  drawGame() {\n    //draw field\n    this.ctxt.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctxt.fillStyle = 'black';\n    this.ctxt.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctxt.fillStyle = 'white';\n    this.ctxt.fillRect(this.halfLinePos, 0, 7, this.canvas.height); //check if ball hit right player\n\n    if (this.checkTouchRightPlayer()) {\n      this.ball.speed += 0.3;\n      this.ball.xDirection = -this.ball.xDirection;\n    } //check if ball hit left player\n\n\n    if (this.checkTouchLeftlayer()) {\n      this.ball.speed += 0.3;\n      this.ball.xDirection = -this.ball.xDirection;\n    }\n\n    this.ball.drawBall();\n    this.pc.drawPlayer();\n    this.user.drawPlayer(); //check minigame\n\n    this.checkMiniGameEnd(); //check gameOver\n\n    if (this.checkGameOver() === 'Left') {\n      this.isGameOver('Left');\n      console.log('Left end');\n    } else if (this.checkGameOver() === 'Right') {\n      this.isGameOver('Right');\n      console.log('Right end');\n    }\n\n    window.requestAnimationFrame(this.drawGame.bind(this));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/Oded/Desktop/Game/pong/src/game/Game.js"],"names":["Ball","Player","Game","constructor","canvas","getPoints","isGameOver","isMulti","instance","p1Points","p2Points","ctxt","getContext","width","document","body","clientWidth","height","window","innerHeight","halfLinePos","addEventListener","start","ball","pc","user","requestAnimationFrame","drawGame","bind","ll","checkTouchRightPlayer","userX","playerWidth","touchX","x","raduis","inYTop","y","inYBottom","playerSize","checkTouchLeftlayer","pcX","resetMiniGame","xDirection","yDirection","speed","checkMiniGameEnd","rightBorder","leftBorder","console","log","checkGameOver","clearRect","fillStyle","fillRect","drawBall","drawPlayer"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyC;AAChD;AACA,QAAGL,IAAI,CAACM,QAAR,EAAkB;AACd,aAAON,IAAI,CAACM,QAAZ;AACH;;AACDN,IAAAA,IAAI,CAACM,QAAL,GAAgB,IAAhB;AAEA,SAAKD,OAAL,GAAeA,OAAf;AAEA,SAAKE,QAAL,GAAgB,CAAhB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AAEA,SAAKL,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB,CAbgD,CAehD;;AACA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKO,IAAL,GAAY,KAAKP,MAAL,CAAYQ,UAAZ,CAAuB,IAAvB,CAAZ;AACA,SAAKR,MAAL,CAAYS,KAAZ,GAAoBC,QAAQ,CAACC,IAAT,CAAcC,WAAd,GAA0B,GAA9C;AACA,SAAKZ,MAAL,CAAYa,MAAZ,GAAsBC,MAAM,CAACC,WAAR,GAAsB,GAA3C;AACA,SAAKC,WAAL,GAAmB,KAAKhB,MAAL,CAAYS,KAAZ,GAAoB,CAAvC;AAEAK,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACpC,WAAKjB,MAAL,CAAYS,KAAZ,GAAoBC,QAAQ,CAACC,IAAT,CAAcC,WAAd,GAA0B,GAA9C;AACA,WAAKZ,MAAL,CAAYa,MAAZ,GAAsBC,MAAM,CAACC,WAAR,GAAsB,GAA3C;AACC,KAHL;AAKH;;AAEDG,EAAAA,KAAK,GAAG;AACJ,QAAI,KAAKf,OAAL,KAAiB,IAArB,EAA2B;AACvB,WAAKgB,IAAL,GAAY,IAAIvB,IAAJ,CAAS,KAAKI,MAAd,CAAZ;AACA,WAAKoB,EAAL,GAAU,IAAIvB,MAAJ,CAAW,IAAX,EAAiB,KAAKG,MAAtB,CAAV;AACA,WAAKqB,IAAL,GAAY,IAAIxB,MAAJ,CAAW,IAAX,EAAiB,KAAKG,MAAtB,CAAZ;AACAc,MAAAA,MAAM,CAACQ,qBAAP,CAA6B,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAA7B;AACH,KALD,MAKM,IAAI,KAAKrB,OAAL,KAAiB,KAArB,EAA4B;AAC9BsB,MAAAA,EAAE,CAAC,KAAKzB,MAAN,CAAF;AACA,WAAKoB,EAAL,GAAU,IAAIvB,MAAJ,CAAW,IAAX,EAAiB,KAAKG,MAAtB,CAAV;AACA,WAAKqB,IAAL,GAAY,IAAIxB,MAAJ,CAAW,IAAX,EAAiB,KAAKG,MAAtB,CAAZ;AACAc,MAAAA,MAAM,CAACQ,qBAAP,CAA6B,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAA7B;AACH;AAEJ;;AAEDE,EAAAA,qBAAqB,GAAE;AACnB,QAAIC,KAAK,GAAG,KAAK3B,MAAL,CAAYS,KAAZ,GAAoB,KAAKY,IAAL,CAAUO,WAA1C;AACA,QAAIC,MAAM,GAAI,KAAKV,IAAL,CAAUW,CAAV,GAAc,KAAKX,IAAL,CAAUY,MAAxB,GAAiCJ,KAA/C;AACA,QAAIK,MAAM,GAAI,KAAKb,IAAL,CAAUc,CAAV,GAAc,KAAKZ,IAAL,CAAUY,CAAtC;AACA,QAAIC,SAAS,GAAI,KAAKf,IAAL,CAAUc,CAAV,GAAc,KAAKZ,IAAL,CAAUY,CAAV,GAAc,KAAKZ,IAAL,CAAUc,UAAvD;;AAEA,QAAIN,MAAM,IAAIK,SAAV,IAAuBF,MAA3B,EAAkC;AAC9B,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEDI,EAAAA,mBAAmB,GAAE;AACjB,QAAIC,GAAG,GAAG,KAAKhB,IAAL,CAAUO,WAApB;AACA,QAAIC,MAAM,GAAI,KAAKV,IAAL,CAAUW,CAAV,GAAc,KAAKX,IAAL,CAAUY,MAAxB,GAAiCM,GAA/C;AACA,QAAIL,MAAM,GAAI,KAAKb,IAAL,CAAUc,CAAV,GAAc,KAAKb,EAAL,CAAQa,CAApC;AACA,QAAIC,SAAS,GAAI,KAAKf,IAAL,CAAUc,CAAV,GAAc,KAAKb,EAAL,CAAQa,CAAR,GAAY,KAAKb,EAAL,CAAQe,UAAnD;;AAEA,QAAIN,MAAM,IAAIK,SAAV,IAAuBF,MAA3B,EAAkC;AAC9B,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEDM,EAAAA,aAAa,GAAE;AACX,SAAKnB,IAAL,CAAUW,CAAV,GAAc,KAAK9B,MAAL,CAAYS,KAAZ,GAAoB,CAAlC;AACA,SAAKU,IAAL,CAAUc,CAAV,GAAc,KAAKjC,MAAL,CAAYa,MAAZ,GAAqB,CAAnC;AACA,SAAKM,IAAL,CAAUoB,UAAV,GAAuB,CAAC,CAAxB;AACA,SAAKpB,IAAL,CAAUqB,UAAV,GAAuB,CAAvB;AACA,SAAKrB,IAAL,CAAUsB,KAAV,GAAkB,CAAlB;AACH;;AAEDC,EAAAA,gBAAgB,GAAE;AACd;AACA,QAAIC,WAAW,GAAG,KAAK3C,MAAL,CAAYS,KAAZ,GAAoB,KAAKU,IAAL,CAAUY,MAAhD;AACA,QAAIa,UAAU,GAAG,KAAKzB,IAAL,CAAUY,MAA3B;;AACA,QAAI,KAAKZ,IAAL,CAAUW,CAAV,GAAca,WAAlB,EAA8B;AAC1B,WAAKtC,QAAL;AACA,WAAKJ,SAAL,CAAe,KAAKI,QAApB,EAA8B,MAA9B;AACA,WAAKiC,aAAL;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKzC,QAAjB;AACH;;AACD,QAAG,KAAKc,IAAL,CAAUW,CAAV,GAAcc,UAAjB,EAA4B;AACxB,WAAKtC,QAAL;AACA,WAAKL,SAAL,CAAe,KAAKK,QAApB,EAA8B,OAA9B;AACA,WAAKgC,aAAL;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxC,QAAjB;AACH;AACJ;;AAEDyC,EAAAA,aAAa,GAAE;AACX,QAAI,KAAK1C,QAAL,KAAkB,CAAtB,EAAyB;AACrB,aAAO,MAAP;AACH,KAFD,MAEM,IAAI,KAAKC,QAAL,KAAkB,CAAtB,EAAyB;AAC3B,aAAO,OAAP;AACH;AACJ;;AAEDiB,EAAAA,QAAQ,GAAE;AACN;AACA,SAAKhB,IAAL,CAAUyC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,KAAKhD,MAAL,CAAYS,KAAtC,EAA6C,KAAKT,MAAL,CAAYa,MAAzD;AACA,SAAKN,IAAL,CAAU0C,SAAV,GAAsB,OAAtB;AACA,SAAK1C,IAAL,CAAU2C,QAAV,CAAmB,CAAnB,EAAqB,CAArB,EAAwB,KAAKlD,MAAL,CAAYS,KAApC,EAA2C,KAAKT,MAAL,CAAYa,MAAvD;AACA,SAAKN,IAAL,CAAU0C,SAAV,GAAsB,OAAtB;AACA,SAAK1C,IAAL,CAAU2C,QAAV,CAAmB,KAAKlC,WAAxB,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,KAAKhB,MAAL,CAAYa,MAAvD,EANM,CAQN;;AACA,QAAI,KAAKa,qBAAL,EAAJ,EAAiC;AAC7B,WAAKP,IAAL,CAAUsB,KAAV,IAAmB,GAAnB;AACA,WAAKtB,IAAL,CAAUoB,UAAV,GAAuB,CAAC,KAAKpB,IAAL,CAAUoB,UAAlC;AACH,KAZK,CAcN;;;AACA,QAAI,KAAKH,mBAAL,EAAJ,EAA+B;AAC3B,WAAKjB,IAAL,CAAUsB,KAAV,IAAmB,GAAnB;AACA,WAAKtB,IAAL,CAAUoB,UAAV,GAAuB,CAAC,KAAKpB,IAAL,CAAUoB,UAAlC;AACH;;AAED,SAAKpB,IAAL,CAAUgC,QAAV;AACA,SAAK/B,EAAL,CAAQgC,UAAR;AACA,SAAK/B,IAAL,CAAU+B,UAAV,GAtBM,CAwBN;;AACA,SAAKV,gBAAL,GAzBM,CA2BN;;AACA,QAAI,KAAKK,aAAL,OAAyB,MAA7B,EAAoC;AAChC,WAAK7C,UAAL,CAAgB,MAAhB;AACA2C,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH,KAHD,MAGM,IAAI,KAAKC,aAAL,OAAyB,OAA7B,EAAsC;AACxC,WAAK7C,UAAL,CAAgB,OAAhB;AACA2C,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;;AACDhC,IAAAA,MAAM,CAACQ,qBAAP,CAA6B,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAA7B;AACH;;AA7IM;;AAgJX,eAAe1B,IAAf","sourcesContent":["import Ball from './Ball';\r\nimport Player from './Player';\r\n\r\nclass Game {\r\n    constructor(canvas, getPoints, isGameOver, isMulti) {\r\n        //singleton\r\n        if(Game.instance) {\r\n            return Game.instance;\r\n        }\r\n        Game.instance = this;\r\n\r\n        this.isMulti = isMulti;\r\n\r\n        this.p1Points = 0;\r\n        this.p2Points = 0;\r\n        \r\n        this.getPoints = getPoints;\r\n        this.isGameOver = isGameOver;\r\n\r\n        //field\r\n        this.canvas = canvas;\r\n        this.ctxt = this.canvas.getContext('2d');\r\n        this.canvas.width = document.body.clientWidth*0.7;\r\n        this.canvas.height = (window.innerHeight )*0.7;\r\n        this.halfLinePos = this.canvas.width / 2;\r\n        \r\n        window.addEventListener('resize', () => {\r\n            this.canvas.width = document.body.clientWidth*0.7;\r\n            this.canvas.height = (window.innerHeight )*0.7;\r\n            }\r\n        );\r\n    }\r\n    \r\n    start() {\r\n        if (this.isMulti === true) {\r\n            this.ball = new Ball(this.canvas);\r\n            this.pc = new Player('P1', this.canvas);\r\n            this.user = new Player('P2', this.canvas);\r\n            window.requestAnimationFrame(this.drawGame.bind(this));\r\n        }else if (this.isMulti === false) {\r\n            ll(this.canvas);\r\n            this.pc = new Player('P1', this.canvas);\r\n            this.user = new Player('PC', this.canvas);\r\n            window.requestAnimationFrame(this.drawGame.bind(this));\r\n        }\r\n\r\n    }\r\n    \r\n    checkTouchRightPlayer(){\r\n        let userX = this.canvas.width - this.user.playerWidth;\r\n        let touchX = (this.ball.x + this.ball.raduis > userX);\r\n        let inYTop = (this.ball.y > this.user.y);\r\n        let inYBottom = (this.ball.y < this.user.y + this.user.playerSize);\r\n        \r\n        if (touchX && inYBottom && inYTop){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    checkTouchLeftlayer(){\r\n        let pcX = this.user.playerWidth;\r\n        let touchX = (this.ball.x - this.ball.raduis < pcX);\r\n        let inYTop = (this.ball.y > this.pc.y);\r\n        let inYBottom = (this.ball.y < this.pc.y + this.pc.playerSize);\r\n\r\n        if (touchX && inYBottom && inYTop){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    resetMiniGame(){\r\n        this.ball.x = this.canvas.width / 2;\r\n        this.ball.y = this.canvas.height / 2;\r\n        this.ball.xDirection = -1;\r\n        this.ball.yDirection = 1;\r\n        this.ball.speed = 4;\r\n    }\r\n\r\n    checkMiniGameEnd(){\r\n        //check left & right boundries ( win /lose )\r\n        let rightBorder = this.canvas.width - this.ball.raduis;\r\n        let leftBorder = this.ball.raduis;\r\n        if (this.ball.x > rightBorder){\r\n            this.p1Points++;\r\n            this.getPoints(this.p1Points, 'Left');\r\n            this.resetMiniGame();\r\n            console.log(this.p1Points);\r\n        }\r\n        if(this.ball.x < leftBorder){\r\n            this.p2Points++;\r\n            this.getPoints(this.p2Points, 'Right');\r\n            this.resetMiniGame();\r\n            console.log(this.p2Points);\r\n        }\r\n    }\r\n    \r\n    checkGameOver(){\r\n        if (this.p1Points === 3) {\r\n            return('Left');\r\n        }else if (this.p2Points === 3) {\r\n            return('Right');\r\n        }\r\n    }\r\n\r\n    drawGame(){\r\n        //draw field\r\n        this.ctxt.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctxt.fillStyle = 'black';\r\n        this.ctxt.fillRect(0,0, this.canvas.width, this.canvas.height);\r\n        this.ctxt.fillStyle = 'white';\r\n        this.ctxt.fillRect(this.halfLinePos, 0, 7, this.canvas.height);\r\n        \r\n        //check if ball hit right player\r\n        if (this.checkTouchRightPlayer()){\r\n            this.ball.speed += 0.3;\r\n            this.ball.xDirection = -this.ball.xDirection;\r\n        }\r\n        \r\n        //check if ball hit left player\r\n        if (this.checkTouchLeftlayer()){\r\n            this.ball.speed += 0.3;\r\n            this.ball.xDirection = -this.ball.xDirection;\r\n        }\r\n        \r\n        this.ball.drawBall();\r\n        this.pc.drawPlayer();\r\n        this.user.drawPlayer();\r\n        \r\n        //check minigame\r\n        this.checkMiniGameEnd();\r\n        \r\n        //check gameOver\r\n        if (this.checkGameOver() === 'Left'){\r\n            this.isGameOver('Left');\r\n            console.log('Left end');\r\n        }else if (this.checkGameOver() === 'Right') {\r\n            this.isGameOver('Right');\r\n            console.log('Right end');\r\n        }\r\n        window.requestAnimationFrame(this.drawGame.bind(this));\r\n    }\r\n    \r\n}\r\nexport default Game;\r\n\r\n"]},"metadata":{},"sourceType":"module"}