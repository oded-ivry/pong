{"ast":null,"code":"import Ball from './Ball';\nimport Player from './Player';\nconst ISPC = false;\nconst ISUSER = true;\n\nclass Game {\n  constructor(canvas, toMulti) {\n    //singleton\n    if (Game.instance) {\n      return Game.instance;\n    }\n\n    Game.instance = this;\n    toMulti(\"hello from game\"); //field\n\n    this.canvas = canvas;\n    this.ctxt = this.canvas.getContext('2d');\n    this.canvas.width = document.body.clientWidth * 0.7;\n    this.canvas.height = window.innerHeight * 0.7;\n    this.halfLinePos = this.canvas.width / 2;\n    window.addEventListener('resize', () => {\n      this.canvas.width = document.body.clientWidth * 0.7;\n      this.canvas.height = window.innerHeight * 0.7;\n    });\n  }\n\n  start() {\n    this.ball = new Ball();\n    this.pc = new Player(ISPC);\n    this.user = new Player(ISUSER);\n    window.requestAnimationFrame(this.drawGame.bind(this));\n  }\n\n  checkTouchRightPlayer() {\n    let userX = this.canvas.width - this.user.playerWidth;\n    let touchX = this.ball.x + this.ball.raduis > userX;\n    let inYTop = this.ball.y > this.user.y;\n    let inYBottom = this.ball.y < this.user.y + this.user.playerSize;\n\n    if (touchX && inYBottom && inYTop) {\n      return true;\n    }\n\n    return false;\n  }\n\n  checkTouchLeftlayer() {\n    let pcX = this.user.playerWidth;\n    let touchX = this.ball.x - this.ball.raduis < pcX;\n    let inYTop = this.ball.y > this.pc.y;\n    let inYBottom = this.ball.y < this.pc.y + this.pc.playerSize;\n\n    if (touchX && inYBottom && inYTop) {\n      return true;\n    }\n\n    return false;\n  }\n\n  checkEndGame() {\n    //check left & right boundries ( win /lose )\n    let rightBorder = this.canvas.width - this.ball.raduis;\n    let leftBorder = this.ball.raduis;\n\n    if (this.ball.x > rightBorder) {\n      return 'right';\n    }\n\n    if (this.ball.x < leftBorder) {\n      return 'left';\n    }\n  }\n\n  drawGame() {\n    //draw field\n    this.ctxt.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctxt.fillStyle = 'black';\n    this.ctxt.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctxt.fillStyle = 'white';\n    this.ctxt.fillRect(this.halfLinePos, 0, 7, this.canvas.height); //check if ball hit right player\n\n    if (this.checkTouchRightPlayer()) {\n      this.ball.speed += 0.3;\n      this.ball.xDirection = -this.ball.xDirection;\n    } //check if ball hit left player\n\n\n    if (this.checkTouchLeftlayer()) {\n      this.ball.speed += 0.3;\n      this.ball.xDirection = -this.ball.xDirection;\n    }\n\n    this.ball.drawBall();\n    this.pc.drawPlayer();\n    this.user.drawPlayer();\n\n    if (this.checkEndGame() === 'right') {\n      console.log('right lost');\n      window.cancelAnimationFrame(this.drawGame.bind(this));\n      window.location.reload();\n    } else if (this.checkEndGame() === 'left') {\n      console.log('left lost');\n      window.cancelAnimationFrame(this.drawGame.bind(this));\n      window.location.reload();\n    }\n\n    window.requestAnimationFrame(this.drawGame.bind(this));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/Oded/Desktop/Game/pong/src/game/Game.js"],"names":["Ball","Player","ISPC","ISUSER","Game","constructor","canvas","toMulti","instance","ctxt","getContext","width","document","body","clientWidth","height","window","innerHeight","halfLinePos","addEventListener","start","ball","pc","user","requestAnimationFrame","drawGame","bind","checkTouchRightPlayer","userX","playerWidth","touchX","x","raduis","inYTop","y","inYBottom","playerSize","checkTouchLeftlayer","pcX","checkEndGame","rightBorder","leftBorder","clearRect","fillStyle","fillRect","speed","xDirection","drawBall","drawPlayer","console","log","cancelAnimationFrame","location","reload"],"mappings":"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","sourcesContent":["import Ball from './Ball';\r\nimport Player from './Player';\r\n\r\nconst ISPC = false;\r\nconst ISUSER = true;\r\n\r\nclass Game {\r\n    constructor(canvas, toMulti) {\r\n        //singleton\r\n        if(Game.instance) {\r\n            return Game.instance;\r\n        }\r\n        Game.instance = this;\r\n        toMulti(\"hello from game\");\r\n        //field\r\n        this.canvas = canvas;\r\n        this.ctxt = this.canvas.getContext('2d');\r\n        this.canvas.width = document.body.clientWidth*0.7;\r\n        this.canvas.height = (window.innerHeight )*0.7;\r\n        this.halfLinePos = this.canvas.width / 2;\r\n        \r\n        window.addEventListener('resize', () => {\r\n            this.canvas.width = document.body.clientWidth*0.7;\r\n            this.canvas.height = (window.innerHeight )*0.7;\r\n            }\r\n        );\r\n    }\r\n    \r\n    start() {\r\n        this.ball = new Ball();\r\n        this.pc = new Player(ISPC);\r\n        this.user = new Player(ISUSER);\r\n        window.requestAnimationFrame(this.drawGame.bind(this));\r\n    }\r\n    \r\n    checkTouchRightPlayer(){\r\n        let userX = this.canvas.width - this.user.playerWidth;\r\n        let touchX = (this.ball.x + this.ball.raduis > userX);\r\n        let inYTop = (this.ball.y > this.user.y);\r\n        let inYBottom = (this.ball.y < this.user.y + this.user.playerSize);\r\n        \r\n        if (touchX && inYBottom && inYTop){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    checkTouchLeftlayer(){\r\n        let pcX = this.user.playerWidth;\r\n        let touchX = (this.ball.x - this.ball.raduis < pcX);\r\n        let inYTop = (this.ball.y > this.pc.y);\r\n        let inYBottom = (this.ball.y < this.pc.y + this.pc.playerSize);\r\n\r\n        if (touchX && inYBottom && inYTop){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    checkEndGame(){\r\n        //check left & right boundries ( win /lose )\r\n        let rightBorder = this.canvas.width - this.ball.raduis;\r\n        let leftBorder = this.ball.raduis;\r\n        if (this.ball.x > rightBorder){\r\n            return 'right';\r\n        }\r\n        if(this.ball.x < leftBorder){\r\n            return 'left';\r\n        }\r\n    }\r\n    \r\n    drawGame(){\r\n        //draw field\r\n        this.ctxt.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctxt.fillStyle = 'black';\r\n        this.ctxt.fillRect(0,0, this.canvas.width, this.canvas.height);\r\n        this.ctxt.fillStyle = 'white';\r\n        this.ctxt.fillRect(this.halfLinePos, 0, 7, this.canvas.height);\r\n        \r\n        //check if ball hit right player\r\n        if (this.checkTouchRightPlayer()){\r\n            this.ball.speed += 0.3;\r\n            this.ball.xDirection = -this.ball.xDirection;\r\n        }\r\n        \r\n        //check if ball hit left player\r\n        if (this.checkTouchLeftlayer()){\r\n            this.ball.speed += 0.3;\r\n            this.ball.xDirection = -this.ball.xDirection;\r\n        }\r\n        \r\n        this.ball.drawBall();\r\n        this.pc.drawPlayer();\r\n        this.user.drawPlayer();\r\n        \r\n        if (this.checkEndGame() === 'right'){\r\n            console.log('right lost');\r\n            window.cancelAnimationFrame(this.drawGame.bind(this));\r\n            window.location.reload();\r\n        }else if (this.checkEndGame() === 'left'){\r\n            console.log('left lost');\r\n            window.cancelAnimationFrame(this.drawGame.bind(this));\r\n            window.location.reload();\r\n        }\r\n        window.requestAnimationFrame(this.drawGame.bind(this));\r\n    }\r\n    \r\n}\r\nexport default Game;\r\n\r\n"]},"metadata":{},"sourceType":"module"}